#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        CameraMonitor.py
## 
## Project :     Camera Monitor
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""In a network where many ccd device servers shares the bandwidth often is necessary to have an upper level inspector."""

__all__ = ["CameraMonitor", "CameraMonitorClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(CameraMonitor.additionnal_import) ENABLED START -----#
from copy import copy
import smtplib
import email.mime.text
from socket import gethostname
try:
    from fandango import Astor  # soft dependency
except:
    Astor = None
import time
import traceback
import threading

DEFAULT_RECHECK_TIME = 10#seconds
#----- PROTECTED REGION END -----#	//	CameraMonitor.additionnal_import

## Device States Description
## INIT : during the events subscription and prepare.
## ON : when is normally running.
## ALARM : at least one sector can be too busy for the number of active cameras.
## FAULT : When something when wrong.

class CameraMonitor (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(CameraMonitor.global_variables) ENABLED START -----#

    ##################
    #----# Logs region
    def cleanAllImportantLogs(self):
        #@todo: clean the important logs when they loose importance.
        self.debug_stream("In %s::cleanAllImportantLogs()"%self.get_name())
        self._important_logs = []
        self.addStatusMsg("")

    def addStatusMsg(self,current,important = False):
        self.debug_stream("In %s::addStatusMsg()"%self.get_name())
        msg = "The device is in %s state.\n"%(self.get_state())
        for ilog in self._important_logs:
            msg = "%s%s\n"%(msg,ilog)
        status = "%s%s\n"%(msg,current)
        self.set_status(status)
        self.push_change_event('Status',status)
        # self.mailto("Status update", status)
        if important and not current in self._important_logs:
            self._important_logs.append(current)

    def change_state(self,newstate):
        self.debug_stream("In %s::change_state(%s)"
                          %(self.get_name(),str(newstate)))
        self.set_state(newstate)
        self.push_change_event('State',newstate)
        self.cleanAllImportantLogs()

    def mailto(self, action, msg):
        if len(self.MailTo) != 0:
            name = self.get_name()#.replace('/','_')
            mail = email.mime.text.MIMEText(msg)
            mail['From'] = "%s@%s" % (name, gethostname())
            mail['To'] = ', '.join(self.MailTo)
            mail['Subject'] = "[%s] %s" % (self.get_name(), action)
            s = smtplib.SMTP('localhost')
            s.sendmail(mail['From'], self.MailTo, mail.as_string())
            s.quit()
    #---- Done Logs region
    ######################

    #########################
    #----# Process Properties
    def _processCamerasListProperty(self):
        '''This method works with the raw input in the property CamerasList
           to convert it in the expected dictionary and do all the state
           event subscriptions.
        '''
        self.info_stream("In %s::_processCamerasListProperty()"\
                         " CamerasList = '%s'"%(self.get_name(),self.CamerasList))
        for i in range(len(self.CamerasList)):
            subline = self.CamerasList[i].split(',')
            for j in range(len(subline)):
                if len(subline[j])>0:
                    try:
                        devName = subline[j].lower()
                        self.CamerasDict[devName] = {'device':PyTango.DeviceProxy(devName)}
                    except Exception,e:
                        self.error_stream("Exception in CamerasList processing: "\
                                          "%d line, %d element, exception: %s"%(i,j,str(e)))
        #per each of those cameras
        for devName in self.CamerasDict.keys():
            dynAttrName = devName.replace("/","--")#Replace by an "impossible" symbol
            #---- FIXME: the separator would be improved
            dynAttr = PyTango.Attr(dynAttrName,\
                                PyTango.DevUShort,\
                                PyTango.READ)
            #---- FIXME: Can the dynAttr be a DevState type?
            self.add_attribute(dynAttr,\
                               r_meth = CameraMonitor.read_oneCameraState,\
                               is_allo_meth = CameraMonitor.is_oneCameraState_allowed)
            self.debug_stream("In %s::processCamerasList() add dyn_attr %s"
                              %(self.get_name(),dynAttrName))
            #subscribe to all the devices 'state' in this list, and collect
            #those subscription ids in each item of the CamerasDict.
            eventId = self.subscribe_event(self.CamerasDict[devName]['device'],
                                           "State")
            self.CamerasDict[devName]['eventId'] = eventId
            #TODO: check the current state and count it if its running.
            #FIXME: may this can be in the push_event()
        #self.debug_stream("In %s::processCamerasList() CamerasDict = %s"
        #                  %(self.get_name(),self.CamerasDict))
    #---- Done Process Properties
    #############################
    
    ######################
    #----# dyn_attr region
    def read_oneCameraState(self, attr):
        self.debug_stream("In %s::read_oneCameraState()"%(self.get_name()))
        devName = attr.get_name().replace("--","/")
        try:
            attr.set_value(self.CamerasDict[devName]['state'])
        except:
            attr.set_value(PyTango.DevState.UNKNOWN)

    def is_oneCameraState_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True
    #---- Done dyn_attr region
    ##########################

    ####################
    #----# events region
    def subscribe_event(self,devProxy,attrName):
        try:
            return devProxy.subscribe_event(attrName,
                                            PyTango.EventType.CHANGE_EVENT,
                                            self)
        except Exception,e:
            self.debug_stream("In %s::subscribe_event(%s,%s) CANNOT subscribe"
                              %(self.get_name(),devProxy.dev_name(),attrName))
            #self.debug_stream("In %s::subscribe_event(%s,%s) Exception %s"
            #                  %(self.get_name(),devProxy.dev_name(),attrName,e))
            self._checkDevice(devProxy.dev_name())
        return None

    def push_event(self,event):
        try:
            if event == None: return
            if event.attr_value == None or event.attr_value.value == None:
                self.debug_stream("In %s::push_event() %s: value has None type"
                                  %(self.get_name(),event.attr_name))
                return
            #----FIXME: Ugly!!
            bar = event.attr_name.rsplit('/',4)[1:4]
            devName = "%s/%s/%s"%(bar[0],bar[1],bar[2])
            #----
            self.debug_stream("In %s::push_event() %s = %s"
                              %(self.get_name(),devName,event.attr_value.value))
            if self.CamerasDict.has_key(devName):
                self._checkDevice(devName,event.attr_value.value)
            else:
                self.error_stream("In %s::push_event() %s not found in dictionary (keys: %s)"
                                  %(self.get_name(),devName,self.CamerasDict.keys()))
        except Exception,e:
            self.debug_stream("In %s::push_event() Exception %s"
                              %(self.get_name(),e))
            traceback.print_exc()

    def fireEventsList(self,eventsAttrList):
        #self.debug_stream("In %s::fireEventsList()"%self.get_name())
        #@todo: add the value on the push_event
        timestamp = time.time()
        for attrEvent in eventsAttrList:
            try:
                self.debug_stream("In %s::fireEventsList() attribute: %s, value: %s"
                                  %(self.get_name(),attrEvent[0],str(attrEvent[1])))
                if attrEvent[0] in ['CyclicBuffer'] and\
                   not self.attr_emitCyclicBuffer_read:
                    self.debug_stream("In %s::fireEventsList() attribute: %s "\
                                      "avoided to emit the event duo to flag."
                                      %(self.get_name(),attrEvent[0]))
                elif len(attrEvent) == 3:#specifies quality
                    self.push_change_event(attrEvent[0],attrEvent[1],
                                           timestamp,attrEvent[2])
                else:
                    self.push_change_event(attrEvent[0],attrEvent[1],
                                           timestamp,PyTango.AttrQuality.ATTR_VALID)
            except Exception,e:
                self.error_stream("In %s::fireEventsList() Exception "\
                                  "with attribute %s"
                                  %(self.get_name(),attrEvent[0]))
                print e
        return
    #---- Done events region
    ########################

    ####################
    #----# thread region
    def createThread(self):
        self.debug_stream("In %s::createThread()"%self.get_name())
        try:
            self._joinerEvent = threading.Event()#to communicate between threads
            self._joinerEvent.clear()
            self._thread = threading.Thread(target=self.recheckThread)
            self._thread.setDaemon(True)
            self._thread.start()
            self.debug_stream("In %s::createThread(): Thread created."%self.get_name())
        except Exception,e:
            self.warn_stream("In %s::createThread(): Exception creating thread: %s."%(self.get_name(),e))
            self.change_state(PyTango.DevState.FAULT)
            self.addStatusMsg("Exception creating calculation thread.",important=True)
            return False
        return True

    def deleteThread(self):
        self.debug_stream("In %s::deleteThread(): Stoping acquisition threading."%self.get_name())
        if hasattr(self,'_joinerEvent'):
            self.debug_stream("In %s::deleteThread(): sending join event."%self.get_name())
            self._joinerEvent.set()
        if hasattr(self,'_thread'):
            self.debug_stream("In %s::deleteThread(): Thread joining."%self.get_name())
            self._thread.join(1)
            if self._thread.isAlive():
                self.debug_stream("In %s::deleteThread(): Thread joined."%self.get_name())

    def recheckThread(self):
        self.debug_stream("In %s::recheckThread(): Thread started."%self.get_name())
        if not hasattr(self,'_joinerEvent'):
            raise Exception("Not possible to start the loop because it have not end condition")
        time.sleep(DEFAULT_RECHECK_TIME)#Wait until first check
        while not self._joinerEvent.isSet():
            t_0 = time.time()
            self.debug_stream("In %s::recheckThread() check for the devices in %s"
                              %(self.get_name(),self.CamerasDict.keys()))
            for devName in self.CamerasDict.keys():
                self._checkDevice(devName)
            deltaT = time.time() - t_0
            if deltaT<DEFAULT_RECHECK_TIME:#if it takes less than the recheck time
                self.debug_stream("In %s::recheckThread() it have taken %6.3f "\
                                  "seconds (go sleep for %6.3f seconds)"
                                  %(self.get_name(),deltaT,DEFAULT_RECHECK_TIME-deltaT))
                time.sleep(DEFAULT_RECHECK_TIME-deltaT)
            else:
                self.debug_stream("In %s::recheckThread() it have taken %6.3f "\
                                  "seconds. Over the loop time, no sleep."
                                  %(self.get_name(),deltaT))
            if self.attr_HangedCameras_read > 0:
                self.__tryRecoverFromHang()
        #TODO: unsubscribe to all the events subscribed
    #---- Done thread region
    ########################
    
    ###################
    #----# Check region
    def _checkDevice(self,devName,newState=None):
        '''This method is called to check is a camera is alive and/or its state.
           Can be called when an event is received (then the camera is not hang),
           or in a periodical check (when the camera can be hanged).
        '''
        self.debug_stream("In %s::_checkDevice(%s)"
                          %(self.get_name(),self.CamerasDict[devName]))
        #If its the first time that an state is collected:
        if not self.CamerasDict[devName].has_key('state'):
            self.CamerasDict[devName]['state'] = None
            self.debug_stream("In %s::_checkDevice(%s) state key initialized."
                              %(self.get_name(),self.CamerasDict[devName]))
        #Camera could be hand only is no event is received and this call comes
        #from the periodical check
        if newState==None:
            if self.__isCameraHanged(devName):
                if self.__isCameraInRunningList(devName):
                    self.__removeRunning(devName)
                if self.__isCameraInFaultList(devName):
                    self.__removeFault(devName)
                if not self.__isCameraInHangedList(devName):
                    self.__appendHanged(devName)
                self.debug_stream("In %s::_checkDevice(%s) device is hang."
                                  %(self.get_name(),self.CamerasDict[devName]))
            elif self.__isCameraInHangedList(devName):
                self.__removeHanged(devName)
        elif self.CamerasDict[devName]['state'] != newState:
            #only if the state have change
            if self.__isCameraRunning(devName):
                self.debug_stream("In %s::_checkDevice(%s) device is running."
                                  %(self.get_name(),self.CamerasDict[devName]))
                if not self.__isCameraInRunningList(devName):
                    self.__appendRunning(devName)
                if self.__isCameraInFaultList(devName):
                    self.__removeFault(devName)
                if self.__isCameraInHangedList(devName):
                    self.__removeHanged(devName)
            elif self.__isCameraInFault(devName):
                self.debug_stream("In %s::_checkDevice(%s) device is in fault."
                                  %(self.get_name(),self.CamerasDict[devName]))
                if self.__isCameraInRunningList(devName):
                    self.__removeRunning(devName)
                if not self.__isCameraInFaultList(devName):
                    self.__appendFault(devName)
                if self.__isCameraInHangedList(devName):
                    self.__removeHanged(devName)
            else:
                self.debug_stream("In %s::_checkDevice(%s) device is in %s."
                                  %(self.get_name(),self.CamerasDict[devName],newState))
                if self.__isCameraInRunningList(devName):
                    self.__removeRunning(devName)
                if self.__isCameraInFaultList(devName):
                    self.__removeFault(devName)
                if self.__isCameraInHangedList(devName):
                    self.__removeHanged(devName)
            #in any case the new state is what must be stored
            self.CamerasDict[devName]['state'] = newState
            self.info_stream("In %s::_checkDevice(%s) is %s"
                              %(self.get_name(),self.CamerasDict[devName],newState))
        self.debug_stream("In %s::_checkDevice(%s) Done..."
                          %(self.get_name(),self.CamerasDict[devName]))
        #in case the the new state is the same than the older, nothing to do.

    def __hasCameraChangeStateTo(self,devName,state):
        if self.CamerasDict[devName].has_key('state'):
            if self.CamerasDict[devName]['state'] != state:
                try:
                    if self.CamerasDict[devName]['device'].state() == state:
                        return True
                except:
                    return False
        return False

    def __hasCameraChangeStateFrom(self,devName,state):
        if self.CamerasDict[devName].has_key('state'):
            if self.CamerasDict[devName]['state'] == state:
                try:
                    if self.CamerasDict[devName]['device'].state() != state:
                        return True
                except:
                    return False
        return False

    #####################
    #----## check running
    def __isCameraRunning(self,devName):
        try:
            isRunning = self.CamerasDict[devName]['device'].state() == PyTango.DevState.RUNNING
            self.debug_stream("In %s::__isCameraRunning() device is running: %s"
                              %(self.get_name(),str(isRunning)))
            return isRunning
        except:
            self.debug_stream("In %s::__isCameraRunning() device is running: "\
                              "False (cannot get state)"%(self.get_name()))
            return False

    def __isCameraInRunningList(self,devName):
        try:
            i = self.attr_RunningCamerasList_read.index(devName)
            self.debug_stream("In %s::__isCameraInRunningList() device is in "\
                              "running list: i=%d"%(self.get_name(),i))
            return True
        except:
            self.debug_stream("In %s::__isCameraInRunningList() device is NOT "\
                              "in running list"%(self.get_name()))
            return False

    def __cameraStopRunning(self,devName):
        return self.__hasCameraChangeStateFrom(devName,PyTango.DevState.RUNNING)

    def __cameraStartRunning(self,devName):
        return self.__hasCameraChangeStateTo(devName,PyTango.DevState.RUNNING)

    def __appendRunning(self,devName):
        try:
            self.attr_RunningCamerasList_read.index(devName)
        except:
            #if there is an exception, is because the device is not in the list
            self.attr_RunningCamerasList_read.append(devName)
            self.debug_stream("In %s::__appendRunning() append a device "\
                              "in the running list"%(self.get_name()))
        else:
            #in case that the device is in the list
            self.warn_stream("In %s::__appendRunning() try append a device "\
                              "that already was in the running list"%(self.get_name()))
        if self.__runningListChanges():
            self.debug_stream("In %s::__appendRunning() append event "\
                              "from the running list"%(self.get_name()))

    def __removeRunning(self,devName):
        try:
            i = self.attr_RunningCamerasList_read.index(devName)
        except:#index exception if it wasn't on the list
            self.error_stream("In %s::__removeRunning() try to remove a device "\
                              "that wasn't in the running list"%(self.get_name()))
            return#without exception
        self.attr_RunningCamerasList_read.pop(i)
        self.debug_stream("In %s::__removeRunning() removed a device "\
                          "from the running list"%(self.get_name()))
        if self.__runningListChanges():
            self.debug_stream("In %s::__removeRunning() remove event "\
                              "from the running list"%(self.get_name()))


    def __runningListChanges(self):
        if self.attr_RunningCameras_read != len(self.attr_RunningCamerasList_read):
            self.debug_stream("In %s::__runningListChanges() running list have "\
                              "changed"%(self.get_name()))
            self.attr_RunningCameras_read = len(self.attr_RunningCamerasList_read)
            self.fireEventsList([['RunningCameras',
                                  self.attr_RunningCameras_read],
                                 ['RunningCamerasList',
                                  self.attr_RunningCamerasList_read]])
            self.mailto("Running Cameras", "There are %d running cameras: %s"
                        % (self.attr_RunningCameras_read,
                           self.attr_RunningCamerasList_read))
            return True
        self.debug_stream("In %s::__runningListChanges() running list have "\
                          "NOT change: %d=%d"%(self.get_name(),
                                               self.attr_RunningCameras_read,
                                               len(self.attr_RunningCamerasList_read)))
        return False
    #----Done check running
    #######################

    ###################
    #----## check fault
    def __isCameraInFault(self,devName):
        try:
            state = self.CamerasDict[devName]['device'].state()
            isFault = state == PyTango.DevState.FAULT
            self.debug_stream("In %s::__isCameraInFault() device %s is in "
                              "fault: %s" % (self.get_name(), devName,
                                             str(isFault)))
            return isFault
        except:
            self.debug_stream("In %s::__isCameraInFault() device is in fault: "\
                              "False (cannot get state)"%(self.get_name()))
            traceback.print_exc()
            return False

    def __isCameraInFaultList(self,devName):
        try:
            i = self.attr_FaultCamerasList_read.index(devName)
            self.debug_stream("In %s::__isCameraInFaultList() device %s is "\
                              "in fault list: i=%d"
                              % (self.get_name(), devName, i))
            return True
        except:
            self.debug_stream("In %s::__isCameraInFaultList() device %s is "\
                              "NOT in fault list"%(self.get_name(), devName))
            return False

    def __cameraRecoverFault(self,devName):
        self.__hasCameraChangeStateFrom(devName,PyTango.DevState.FAULT)

    def __cameraDecayFault(self,devName):
        return self.__hasCameraChangeStateTo(devName,PyTango.DevState.FAULT)

    def __appendFault(self,devName):
        try:
            self.attr_FaultCamerasList_read.index(devName)
        except:
            #if there is an exception, is because the device is not in the list
            self.attr_FaultCamerasList_read.append(devName)
            self.debug_stream("In %s::__appendFault() append %s device "\
                              "in the fault list"%(self.get_name(), devName))
        else:
            #in case that the device is in the list
            self.warn_stream("In %s::__appendFault() try append %s device "\
                              "that already was in the fault list"
                              % (self.get_name(), devName))
        if self.__faultListChanges():
            self.debug_stream("In %s::__appendFault() append event "\
                              "from the fault list"%(self.get_name()))

    def __removeFault(self,devName):
        try:
            i = self.attr_FaultCamerasList_read.index(devName)
        except:#index exception if it wasn't on the list
            self.error_stream("In %s::__removeFault() try to remove %s device "\
                              "that wasn't in the fault list"
                              % (self.get_name(), devName))
            return#without exception
        self.attr_FaultCamerasList_read.pop(i)
        self.debug_stream("In %s::__removeFault() removed %s device "\
                          "from the fault list"%(self.get_name(), devName))
        if self.__faultListChanges():
            self.debug_stream("In %s::__removeFault() removed event "\
                              "from the fault list"%(self.get_name()))

    def __faultListChanges(self):
        if self.attr_FaultCameras_read != len(self.attr_FaultCamerasList_read):
            self.debug_stream("In %s::__faultListChanges() fault list have "\
                              "changed"%(self.get_name()))
            self.attr_FaultCameras_read = len(self.attr_FaultCamerasList_read)
            self.fireEventsList([['FaultCameras',
                                  self.attr_FaultCameras_read],
                                 ['FaultCamerasList',
                                  self.attr_FaultCamerasList_read]])
            self.mailto("Fault Cameras", "There are %d cameras in fault: %s"
                        % (self.attr_FaultCameras_read,
                           self.attr_FaultCamerasList_read))
            if self.attr_FaultCameras_read > 0:
                self.__tryRecoverFromFault()
            return True
        self.debug_stream("In %s::__faultListChanges() fault list have "\
                          "NOT change: %d=%d"%(self.get_name(),
                                               self.attr_FaultCameras_read,
                                               len(self.attr_FaultCamerasList_read)))
        return False

    def __tryRecoverFromFault(self):
        if self.TryFaultRecover:
            cameras = copy(self.attr_FaultCamerasList_read)
            errors = {}
            for camera in cameras:
                try:
                    self.debug_stream("In %s::__faultListChanges() "
                                      "call Init() for %s"
                                      % (self.get_name(), camera))
                    PyTango.DeviceProxy(camera).Init()
                except exception as e:
                    if camera not in errors:
                        errors[camera] = []
                    errors[camera].append(e)
            mailBody = "Applied the recovery from Fault procedure.\n"
            mailBody = "%s\nAffected cameras are: %s" % (mailBody, cameras)
            if len(errors) != 0:
                mailBody("%s\nEncoutered exceptions during the process:\n%s"
                         % (mailBody, errors))
            mailBody = "%s\n--\nEnd transmission." % (mailBody)
            self.mailto("Recovery from Fault", mailBody)
    #---- Done Check fault
    ######################

    ##################
    #----## check hang
    def __isCameraHanged(self,devName):
        try:
            self.CamerasDict[devName]['device'].state()
        except:
            self.debug_stream("In %s::__isCameraHanged() device %s is hang: "
                              "True (cannot get state)"
                              % (self.get_name(), devName))
            return True
        self.debug_stream("In %s::__isCameraHanged() device %s is hang: "\
                          "False (cannot get state)"%(self.get_name(), devName))
        return False

    def __isCameraInHangedList(self,devName):
        try:
            i = self.attr_HangedCamerasList_read.index(devName)
            self.debug_stream("In %s::__isCameraInHangedList() device %s is in "\
                              "hang list: i=%d"%(self.get_name(),devName, i))
            return True
        except:
            self.debug_stream("In %s::__isCameraInHangedList() device %s is NOT "\
                              "in hang list"%(self.get_name(), devName))
            return False

    def __wasCameraHung(self,devName):
        if self.CamerasDict[devName].has_key('eventId'):
            return self.CamerasDict[devName]['eventId'] == None
        return True

    def __cameraHungRecovered(self):
        eventId = self.subscribe_event(self.CamerasDict[devName]['device'],
                                       "State")
        self.CamerasDict[devName]['eventId'] = eventId
        return eventId != None

    def __appendHanged(self,devName):
        try:
            self.attr_HangedCamerasList_read.index(devName)
        except:
            #if there is an exception, is because the device is not in the list
            self.attr_HangedCamerasList_read.append(devName)
            self.debug_stream("In %s::__appendHanged() append %s device "\
                              "in the hanged list"%(self.get_name(), devName))
        else:
            #in case that the device is in the list
            self.error_stream("In %s::__appendHanged() try append %s device "\
                              "that already was in the hanged list"
                              % (self.get_name(), devName))
        if self.__hangedListChanges():
            self.debug_stream("In %s::__appendHanged() append event "\
                              "from the hanged list"%(self.get_name()))

    def __removeHanged(self,devName):
        try:
            i = self.attr_HangedCamerasList_read.index(devName)
        except:#index exception if it wasn't on the list
            self.warn_stream("In %s::__removeHanged() try to remove %s device "
                              "that wasn't in the hanged list"
                              % (self.get_name(), devName))
            return#without exception
        self.attr_HangedCamerasList_read.pop(i)
        self.debug_stream("In %s::__removeHanged() removed %s device "\
                          "from the hanged list"%(self.get_name(), devName))
        if self.__hangedListChanges():
            self.debug_stream("In %s::__removeHanged() removed event "\
                              "from the hanged list"%(self.get_name()))

    def __hangedListChanges(self):
        if self.attr_HangedCameras_read != len(self.attr_HangedCamerasList_read):
            self.debug_stream("In %s::__hangedListChanges() hand list have "\
                              "changed"%(self.get_name()))
            self.attr_HangedCameras_read = len(self.attr_HangedCamerasList_read)
            self.fireEventsList([['HangedCameras',
                                  self.attr_HangedCameras_read],
                                 ['HangedCamerasList',
                                  self.attr_HangedCamerasList_read]])
            self.mailto("Hanged Cameras", "There are %d hang cameras: %s"
                        % (self.attr_HangedCameras_read,
                           self.attr_HangedCamerasList_read))
            if self.attr_HangedCameras_read > 0:
                self.__tryRecoverFromHang()
            return True
        self.debug_stream("In %s::__hangedListChanges() hang list have "\
                          "NOT change: %d=%d"%(self.get_name(),
                                               self.attr_HangedCameras_read,
                                               len(self.attr_HangedCamerasList_read)))
        return False

    def __tryRecoverFromHang(self):
        if self.TryHangRecover and Astor is not None:
            cameras = copy(self.attr_HangedCamerasList_read)
            instances = []
            errors = {}
            astor = Astor()
            for camera in cameras:
                try:
                    instance = astor.get_device_server(camera)
                    if instance is not None:
                        i = 0
                        while astor.stop_servers(instance):
                            self.debug_stream("Stopping %s instance (%d)"
                                              % (instance, i))
                            time.sleep(1)
                        instances.append(instance)
                    else:
                        raise Exception("Astor didn't solve the device server")
                except Exception as e:
                    if camera not in errors:
                        errors[camera] = []
                    errors[camera].append(e)
            astor.start_servers(instances)
            mailBody = "Applied the recovery from Hang procedure.\n"
            mailBody = "%s\nAffected instances are: %s" % (mailBody, instances)
            if len(errors) != 0:
                mailBody = "%s\nEncoutered exceptions during the process:\n%s"\
                           % (mailBody, errors)
            mailBody = "%s\n--\nEnd transmission." % (mailBody)
            self.mailto("Recovery from Hang", mailBody)
    #---- Done check hang
    #####################

    #---- Done check region
    #######################
    
    #----- PROTECTED REGION END -----#	//	CameraMonitor.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        CameraMonitor.init_device(self)
        #----- PROTECTED REGION ID(CameraMonitor.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(CameraMonitor.delete_device) ENABLED START -----#
        self.deleteThread()
        #----- PROTECTED REGION END -----#	//	CameraMonitor.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_RunningCameras_read = 0
        self.attr_FaultCameras_read = 0
        self.attr_HangedCameras_read = 0
        self.attr_RunningCamerasList_read = ['']
        self.attr_FaultCamerasList_read = ['']
        self.attr_HangedCamerasList_read = ['']
        #----- PROTECTED REGION ID(CameraMonitor.init_device) ENABLED START -----#
        #---- set the vbles ----
        self.CamerasDict = {}
        self.attr_RunningCamerasList_read = []
        self.attr_FaultCamerasList_read = []
        self.attr_HangedCamerasList_read = []
        #---- prepare attributes that will have events ----
        self.set_change_event('State', True, False)
        self.set_change_event('Status', True, False)
        self.change_state(PyTango.DevState.INIT)
        self.set_change_event('RunningCameras', True, False)
        self.set_change_event('RunningCamerasList', True, False)
        self.set_change_event('FaultCameras', True, False)
        self.set_change_event('FaultCamerasList', True, False)
        self.set_change_event('HangedCameras', True, False)
        self.set_change_event('HangedCamerasList', True, False)
        #---- process properties ----
        self._processCamerasListProperty()
        #---- thread to periodically monitor the cameras (if they hang or recover)
        self.createThread()
        #everything ok:
        self.change_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	CameraMonitor.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(CameraMonitor.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.always_executed_hook

    #-----------------------------------------------------------------------------
    #    CameraMonitor read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_RunningCameras(self, attr):
        self.debug_stream("In read_RunningCameras()")
        #----- PROTECTED REGION ID(CameraMonitor.RunningCameras_read) ENABLED START -----#
        attr.set_value(self.attr_RunningCameras_read)
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.RunningCameras_read
        
    def read_FaultCameras(self, attr):
        self.debug_stream("In read_FaultCameras()")
        #----- PROTECTED REGION ID(CameraMonitor.FaultCameras_read) ENABLED START -----#
        attr.set_value(self.attr_FaultCameras_read)
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.FaultCameras_read
        
    def read_HangedCameras(self, attr):
        self.debug_stream("In read_HangedCameras()")
        #----- PROTECTED REGION ID(CameraMonitor.HangedCameras_read) ENABLED START -----#
        attr.set_value(self.attr_HangedCameras_read)
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.HangedCameras_read
        
    def read_RunningCamerasList(self, attr):
        self.debug_stream("In read_RunningCamerasList()")
        #----- PROTECTED REGION ID(CameraMonitor.RunningCamerasList_read) ENABLED START -----#
        attr.set_value(self.attr_RunningCamerasList_read)
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.RunningCamerasList_read
        
    def read_FaultCamerasList(self, attr):
        self.debug_stream("In read_FaultCamerasList()")
        #----- PROTECTED REGION ID(CameraMonitor.FaultCamerasList_read) ENABLED START -----#
        attr.set_value(self.attr_FaultCamerasList_read)
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.FaultCamerasList_read
        
    def read_HangedCamerasList(self, attr):
        self.debug_stream("In read_HangedCamerasList()")
        #----- PROTECTED REGION ID(CameraMonitor.HangedCamerasList_read) ENABLED START -----#
        attr.set_value(self.attr_HangedCamerasList_read)
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.HangedCamerasList_read
        
    
    
        #----- PROTECTED REGION ID(CameraMonitor.initialize_dynamic_attributes) ENABLED START -----#
    def initialize_dynamic_attributes(self):
        pass
        #----- PROTECTED REGION END -----#	//	CameraMonitor.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(CameraMonitor.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    CameraMonitor command methods
    #-----------------------------------------------------------------------------
    

class CameraMonitorClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(CameraMonitor.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CameraMonitor.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`CameraMonitor.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(CameraMonitor.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CameraMonitor.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'CamerasList':
            [PyTango.DevVarStringArray,
            "Dictionary convertible string with an internal label as a key and its device name as item.",
            [] ],
        'SectorsList':
            [PyTango.DevVarStringArray,
            "Dictionary convertible string with sectors as key and the item is a list of tags from the CameraList.",
            [] ],
        'TryFaultRecover':
            [PyTango.DevBoolean,
            "Flag to tell the device that, if possible, try to recover cameras in fault state",
            [] ],
        'TryHangRecover':
            [PyTango.DevBoolean,
            "Flag to tell the device that, if possible, try to recover hang cameras",
            [] ],
        'MailTo':
            [PyTango.DevVarStringArray,
            "List of mail destinations to report when fault or hang lists changes",
            [] ]
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'RunningCameras':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Number of ccd running state in total.",
            } ],
        'FaultCameras':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Number of ccd in fault state in total.",
            } ],
        'HangedCameras':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "Number of ccd non accessible in total.",
            } ],
        'RunningCamerasList':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 999]],
        'FaultCamerasList':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 999]],
        'HangedCamerasList':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 999]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(CameraMonitorClass,CameraMonitor,'CameraMonitor')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
